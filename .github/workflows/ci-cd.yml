name: CI/CD Pipeline

on:
  push:
    branches:
      - dev
      - main

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20.x'

      - name: Install dependencies
        run: npm install

      - name: Build the project
        run: npm run build

      - name: Determine Environment
        id: set-env
        run: |
          if [[ '${{ github.ref }}' == 'refs/heads/main' ]]; then
            echo "ENV=production" >> $GITHUB_ENV
          else
            echo "ENV=development" >> $GITHUB_ENV
          fi

      - name: Set Database URL for Production
        if: ${{ github.env.ENV }} == 'production'
        run: echo "DATABASE_URL=${{ secrets.DATABASE_URL_PROD }}" >> $GITHUB_ENV
        shell: bash

      - name: Set Database URL for Development
        if: ${{ github.env.ENV }} == 'development'
        run: echo "DATABASE_URL=${{ secrets.DATABASE_URL_DEV }}" >> $GITHUB_ENV
        shell: bash

      - name: Backup Database (Before Migration)
        env:
          DATABASE_URL: ${{ env.DATABASE_URL }}
          BACKUP_PATH: ${{ secrets.BACKUP_PATH }}
        run: |
          mkdir -p "$BACKUP_PATH"
          if [[ -z "$DATABASE_URL" || -z "$BACKUP_PATH" ]]; then
            echo "Error: DATABASE_URL or BACKUP_PATH is not set properly."
            exit 1
          fi

          # Export password to use with pg_dump
          export PGPASSWORD=$(echo $DATABASE_URL | sed -n 's/^postgresql:\/\/[^:]*:\([^@]*\)@.*$/\1/p')

          # Run the pg_dump command directly with DATABASE_URL
          pg_dump "$DATABASE_URL" > "$BACKUP_PATH/db_backup_$(date +%F-%H-%M-%S).sql"

          # Check if pg_dump was successful
          if [[ $? -ne 0 ]]; then
            echo "Error: pg_dump failed."
            exit 1
          fi
        shell: bash

      - name: Check for Database Changes (Skip Migration if None)
        id: check-diff
        run: |
          npx prisma migrate diff --from-schema-datasource --to-migrations --exit-code
        continue-on-error: true

      - name: Run Migrations (If Changes Detected)
        if: steps.check-diff.outcome == 'success'
        env:
          DATABASE_URL: ${{ env.DATABASE_URL }}
        run: npm run migrate

      - name: Seed Database (Using Backup)
        if: ${{ github.env.ENV }} == 'development' && steps.check-diff.outcome == 'success'
        env:
          DATABASE_URL: ${{ env.DATABASE_URL }}
          BACKUP_PATH: ${{ secrets.BACKUP_PATH }}
        run: |
          # Use the most recent backup for seeding
          BACKUP_FILE=$(ls -t "$BACKUP_PATH" | head -n 1)
          if [[ -f "$BACKUP_PATH/$BACKUP_FILE" ]]; then
            psql "$DATABASE_URL" < "$BACKUP_PATH/$BACKUP_FILE"
          else
            echo "No backup file found for seeding."
            exit 1
          fi
        shell: bash

      - name: Run Tests
        env:
          DATABASE_URL: ${{ env.DATABASE_URL }}
        run: npm test

      # Add deployment steps here
